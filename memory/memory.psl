vunit i_memory(memory(synthesis))
{

   signal f_wb_req_count   : integer range 0 to 3 := 0;
   signal f_wb_stall_delay : integer range 0 to 3 := 0;
   signal f_wb_ack_delay   : integer range 0 to 3 := 0;

   -- set all declarations to run on clk
   default clock is rising_edge(clk_i);


   --------------------------------------------
   -- INTERNAL ASSERTIONS
   --------------------------------------------

   -- The two output fifos should never overflow.
   f_osf_src_full : assert always {wb_ack_i and osf_mem_valid and osf_mem_data} |-> {osf_src_ready};
   f_osf_dst_full : assert always {wb_ack_i and osf_mem_valid and not osf_mem_data} |-> {osf_dst_ready};


   ------------------------------------------------
   -- PROPERTIES OF THE WISHBONE MASTER INTERFACE
   ------------------------------------------------

   -- Count the number of outstanding WISHBONE requests
   p_wb_req_count : process (clk_i)
   begin
      if rising_edge(clk_i) then
         -- Request without response
         if (wb_cyc_o and wb_stb_o and not wb_stall_i) and not (wb_cyc_o and wb_ack_i) then
            f_wb_req_count <= f_wb_req_count + 1;
         end if;

         -- Reponse without request
         if not(wb_cyc_o and wb_stb_o and not wb_stall_i) and (wb_cyc_o and wb_ack_i) then
            f_wb_req_count <= f_wb_req_count - 1;
         end if;

         -- If CYC goes low mid-transaction, the transaction is aborted.
         if rst_i or not wb_cyc_o then
            f_wb_req_count <= 0;
         end if;
      end if;
   end process p_wb_req_count;


   -- WISHBONE MASTER: Clear all requests after a reset
   f_wb_master_reset : assert always {rst_i} |=> {not wb_cyc_o and not wb_stb_o};

   -- WISHBONE MASTER: STB must be low when CYC is low.
   f_wb_master_stb_low : assert always {not wb_cyc_o} |-> {not wb_stb_o};

   -- WISHBONE MASTER: While a request is stalled it cannot change, except on reset or abort.
   f_wb_master_stable : assert always {wb_stb_o and wb_stall_i and not rst_i} |=> {stable(wb_stb_o) and stable(wb_addr_o)};

   -- WISHBONE MASTER: At most one outstanding requests
   f_wb_master_req_count_max : assert always {f_wb_req_count >= 1} |-> {not wb_stb_o};


   -----------------------------
   -- ASSUMPTIONS ABOUT INPUTS
   -----------------------------

   -- Count the number of clock cycles the WISHBONE SLAVE stalls
   p_wb_stall_delay : process (clk_i)
   begin
      if rising_edge(clk_i) then
         -- Stalled request
         if wb_cyc_o and wb_stb_o and wb_stall_i then
            f_wb_stall_delay <= f_wb_stall_delay + 1;
         else
            f_wb_stall_delay <= 0;
         end if;
      end if;
   end process p_wb_stall_delay;

   -- Count the number of clock cycles the WISHBONE SLAVE waits before responding
   p_wb_ack_delay : process (clk_i)
   begin
      if rising_edge(clk_i) then
         -- Transaction without response
         if (f_wb_req_count > 0 or (wb_cyc_o = '1' and wb_stb_o = '1' and wb_stall_i = '0')) and wb_cyc_o = '1' and wb_ack_i = '0' then
            f_wb_ack_delay <= f_wb_ack_delay + 1;
         else
            f_wb_ack_delay <= 0;
         end if;
      end if;
   end process p_wb_ack_delay;


   -- Require reset at startup.
   f_reset : assume {rst_i};

   -- WISHBONE SLAVE: No ACKs without a request
   f_wb_slave_ack_idle : assume always {f_wb_req_count = 0} |-> {not wb_ack_i};

   -- WISHBONE SLAVE: Only stall for at most 2 clock cycles. This is an artifical constraint.
   f_wb_slave_stall_delay_max : assume always {f_wb_stall_delay <= 2};

   -- WISHBONE SLAVE: Respond within at most 2 clock cycles. This is an artifical constraint.
   f_wb_slave_ack_delay_max : assume always {f_wb_ack_delay <= 2};


   --------------------------------------------
   -- COVER STATEMENTS TO VERIFY REACHABILITY
   --------------------------------------------

   -- OUTPUT src data
   f_cover_out_src : cover {msrc_valid_o};

   -- OUTPUT dst data
   f_cover_out_dst : cover {mdst_valid_o};

} -- vunit i_memory(memory(synthesis))

